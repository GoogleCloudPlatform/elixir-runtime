################################################################################
## This Dockerfile builds an Elixir application for the Google App Engine
## Flexible Environment. It is meant for an application that does not use
## Distillery releases for deployment.
## This Dockerfile may be modified and used as an App Engine "custom runtime",
## or even ported to a different Docker-based hosting environment such as
## Kubernetes.
##
## Generated at: <%= @timestamp %>
## From configuration: <%= @app_yaml_path %>
## Project: <%= @project_id_for_display %>
## Service: <%= @service_name %>
################################################################################


################################################################################
## 1. Application build
## From the builder image, installs any dependencies, builds the application,
## and runs any additional requested build jobs such as preparation of
## JavaScript and CSS assets. This stage should prepare the /app directory
## exactly the way needed to run the final application.

FROM <%= @builder_image %> AS app-build

## If your build requires additional Debian packages, install them here.
<%= if @builder_packages == "" do %>
# RUN apt-get update -y \
#     && apt-get install -y -q package-name another-package-name \
#     && apt-get clean \
#     && rm -f /var/lib/apt/lists/*_*
<% else %>
RUN apt-get update -y \
    && apt-get install -y -q <%= @builder_packages %> \
    && apt-get clean \
    && rm -f /var/lib/apt/lists/*_*
<% end %>

## If your application requires a specific version of Erlang and/or Elixir,
## provide a `.tool-versions` file in your application directory, and also set
## the versions here. Finally, make sure the corresponding versions are also
## set in the runtime image at the bottom. If you change the versions in the
## future, make sure all three of these versions match.
## For more information on the asdf tool that is used to manage Erlang and
## Elixir installation, see https://github.com/asdf-vm/asdf
<%= if @erlang_version do %>
ARG requested_erlang_version="<%= @erlang_version %>"
RUN if test ! -x /opt/asdf/installs/erlang/${requested_erlang_version}/bin/erl; then \
      asdf plugin-update erlang \
      && asdf install erlang ${requested_erlang_version} \
      && asdf global erlang ${requested_erlang_version}; \
    fi
<% else %>
# ARG requested_erlang_version="20.1"
# RUN if test ! -x /opt/asdf/installs/erlang/${requested_erlang_version}/bin/erl; then \
#       asdf plugin-update erlang \
#       && asdf install erlang ${requested_erlang_version} \
#       && asdf global erlang ${requested_erlang_version}; \
#     fi
<% end %>
<%= if @elixir_version do %>
ARG requested_elixir_version="<%= @elixir_version %>"
RUN if test ! -x /opt/asdf/installs/elixir/${requested_elixir_version}/bin/elixir; then \
      asdf plugin-update elixir \
      && asdf install elixir ${requested_elixir_version} \
      && asdf global elixir ${requested_elixir_version} \
      && mix local.hex --force \
      && mix local.rebar --force; \
    fi
<% else %>
# ARG requested_elixir_version="1.5.2-otp-20"
# RUN if test ! -x /opt/asdf/installs/elixir/${requested_elixir_version}/bin/elixir; then \
#       asdf plugin-update elixir \
#       && asdf install elixir ${requested_elixir_version} \
#       && asdf global elixir ${requested_elixir_version} \
#       && mix local.hex --force \
#       && mix local.rebar --force; \
#     fi
<% end %>

## Set gcloud project here if your build scripts need to use gcloud.
<%= if @project_id do %>
RUN gcloud config set project <%= @project_id %>
<% else %>
# RUN gcloud config set project <%= @project_id_for_example %>
<% end %>

## If your build scripts need any environment variables, set them here.
## Generally, these will come from the application's app engine configuration.
<%= if @env_variables == "" do %>
# ENV NAME="value"
<% else %>
ENV <%= @env_variables %>
<% end %>

## If your build scripts need access to your application's CloudSQL instances,
## list them here, comma-delimited. This environment variable tells the
## "access_cloud_sql" script which databases to connect to.
<%= if @cloud_sql_instances == "" do %>
# ARG BUILD_CLOUDSQL_INSTANCES="<%= @project_id_for_example %>:db-region:db-name"
<% else %>
ARG BUILD_CLOUDSQL_INSTANCES="<%= @cloud_sql_instances %>"
<% end %>

## Copy the application files.
COPY . /app/

## If your build scripts need credentials for access to cloud resources, you
## may provide an appropriate JSON credentials file and set the
## GOOGLE_APPLICATION_CREDENTIALS path accordingly. This is not necessary if
## you provide the cloudbuild service account with the needed privileges.
# COPY my-build-credentials.json /app/build-credentials.json
# ENV GOOGLE_APPLICATION_CREDENTIALS=/app/build-credentials.json

## Install dependencies and compile the application.
RUN mix deps.get && mix compile

## Run application build scripts here.
## Scripts that require access to the application CloudSQL instances should
## run access_cloud_sql first to start the CloudSQL Proxy. e.g.
##   RUN access_cloud_sql && mix my_task
## Otherwise, simply run each build script in order in a separate RUN command.
<%= if @build_scripts != "" do %>
<%= @build_scripts %>
<% end %>


################################################################################
## 2. Runtime image
## From the base image, installs the application directory built above, and
## sets the entrypoint. This is the final image executed by Google App Engine.

FROM <%= @base_image %>

## If your application needs additional Debian packages at runtime, install
## them here.
<%= if @runtime_packages == "" do %>
# RUN apt-get update -y \
#     && apt-get install -y -q package-name another-package-name \
#     && apt-get clean \
#     && rm -f /var/lib/apt/lists/*_*
<% else %>
RUN apt-get update -y \
    && apt-get install -y -q <%= @runtime_packages %> \
    && apt-get clean \
    && rm -f /var/lib/apt/lists/*_*
<% end %>

## If a specific version of Erlang and/or Elixir was installed into the build
## image above, also copy it into the runtime image.
## Note these versions must match the versions specified in the build image.
<%= if @erlang_version do %>
ARG requested_erlang_version="<%= @erlang_version %>"
RUN rm -rf /opt/asdf/installs/erlang/${requested_erlang_version}
COPY --from=app-build /opt/asdf/installs/erlang/${requested_erlang_version} \
     /opt/asdf/installs/erlang/${requested_erlang_version}
RUN asdf global erlang ${requested_erlang_version}
<% else %>
# ARG requested_erlang_version="20.1"
# RUN rm -rf /opt/asdf/installs/erlang/${requested_erlang_version}
# COPY --from=app-build /opt/asdf/installs/erlang/${requested_erlang_version} \
#      /opt/asdf/installs/erlang/${requested_erlang_version}
# RUN asdf global erlang ${requested_erlang_version}
<% end %>
<%= if @elixir_version do %>
ARG requested_elixir_version="<%= @elixir_version %>"
RUN rm -rf /opt/asdf/installs/elixir/${requested_elixir_version}
COPY --from=app-build /opt/asdf/installs/elixir/${requested_elixir_version} \
     /opt/asdf/installs/elixir/${requested_elixir_version}
RUN asdf global elixir ${requested_elixir_version} \
    && mix local.hex --force \
    && mix local.rebar --force
<% else %>
# ARG requested_elixir_version="1.5.2-otp-20"
# RUN rm -rf /opt/asdf/installs/elixir/${requested_elixir_version}
# COPY --from=app-build /opt/asdf/installs/elixir/${requested_elixir_version} \
#      /opt/asdf/installs/elixir/${requested_elixir_version}
# RUN asdf global elixir ${requested_elixir_version} \
#     && mix local.hex --force \
#     && mix local.rebar --force
<% end %>

## Copy built application from build stage
COPY --from=app-build /app/ /app/

## Command to start application.
CMD <%= @entrypoint %>
